import datetime
import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove

from infrastructure.database.models import Question, User
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.config import load_config
from tgbot.filters.topic import IsTopicMessageWithCommand
from tgbot.keyboards.user.main import (
    FinishedQuestion,
    dialog_quality_kb,
)
from tgbot.misc import dicts
from tgbot.services.logger import setup_logging
from tgbot.services.scheduler import (
    stop_inactivity_timer,
)

topic_cmds_router = Router()

config = load_config(".env")

setup_logging()
logger = logging.getLogger(__name__)


@topic_cmds_router.message(IsTopicMessageWithCommand("end"))
async def end_q_cmd(message: Message, stp_db):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        duty: User = await repo.users.get_user(message.from_user.id)
        question: Question = await repo.questions.get_question(
            topic_id=message.message_thread_id
        )

    if question is not None:
        if question.Status != "closed" and question.TopicDutyFullname == duty.FIO:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            stop_inactivity_timer(question.Token)

            await repo.questions.update_question_status(
                token=question.Token, status="closed"
            )
            await repo.questions.update_question_end(
                token=question.Token, end_time=datetime.datetime.now()
            )

            await message.reply(
                """<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>""",
                reply_markup=dialog_quality_kb(token=question.Token, role="duty"),
            )

            await message.bot.edit_forum_topic(
                chat_id=config.tg_bot.forum_id,
                message_thread_id=question.TopicId,
                name=question.Token,
                icon_custom_emoji_id=dicts.topicEmojis["closed"],
            )
            await message.bot.close_forum_topic(
                chat_id=config.tg_bot.forum_id, message_thread_id=question.TopicId
            )

            employee: User = await repo.users.get_user(
                fullname=question.EmployeeFullname
            )

            await message.bot.send_message(
                chat_id=employee.ChatId,
                text="<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>",
                reply_markup=ReplyKeyboardRemove(),
            )

            await message.bot.send_message(
                chat_id=employee.ChatId,
                text=f"""<b>{duty.FIO}</b> –∑–∞–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å""",
                reply_markup=dialog_quality_kb(token=question.Token, role="employee"),
            )

            logger.info(
                f"[–í–æ–ø—Ä–æ—Å] - [–ó–∞–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ó–∞–∫—Ä—ã—Ç –≤–æ–ø—Ä–æ—Å {question.Token} —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º {question.EmployeeFullname}"
            )
        elif question.Status != "closed" and question.TopicDutyFullname != duty.FIO:
            await message.reply("""<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>

–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!

<i>–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</i>""")
            logger.warning(
                f"[–í–æ–ø—Ä–æ—Å] - [–ó–∞–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ {question.Token} –Ω–µ—É—Å–ø–µ—à–Ω–∞. –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –¥–µ–∂—É—Ä–Ω–æ–º—É"
            )
        elif question.Status == "closed":
            await message.reply("<b>üîí –í–æ–ø—Ä–æ—Å –±—ã–ª –∑–∞–∫—Ä—ã—Ç</b>")
            await message.bot.close_forum_topic(
                chat_id=config.tg_bot.forum_id, message_thread_id=question.TopicId
            )
            logger.warning(
                f"[–í–æ–ø—Ä–æ—Å] - [–ó–∞–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ {question.Token} –Ω–µ—É—Å–ø–µ—à–Ω–∞. –í–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç"
            )

    else:
        await message.answer("""<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –≤ –±–∞–∑–µ""")
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–ó–∞–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ —Å TopicId = {message.message_id}"
        )


@topic_cmds_router.message(IsTopicMessageWithCommand("release"))
async def release_q_cmd(message: Message, stp_db):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        duty: User = await repo.users.get_user(message.from_user.id)
        question: Question = await repo.questions.get_question(
            topic_id=message.message_thread_id
        )

        if question is not None:
            if (
                question.TopicDutyFullname is not None
                and question.TopicDutyFullname == duty.FIO
            ):
                await repo.questions.update_question_duty(
                    token=question.Token, topic_duty=None
                )
                await repo.questions.update_question_status(
                    token=question.Token, status="open"
                )

                employee: User = await repo.users.get_user(
                    fullname=question.EmployeeFullname
                )

                await message.bot.edit_forum_topic(
                    chat_id=config.tg_bot.forum_id,
                    message_thread_id=question.TopicId,
                    icon_custom_emoji_id=dicts.topicEmojis["open"],
                )
                await message.answer("""<b>üïäÔ∏è –í–æ–ø—Ä–æ—Å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω</b>

–î–ª—è –≤–∑—è—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–∞–±–æ—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç—É —Ç–µ–º—É""")

                await message.bot.send_message(
                    chat_id=employee.ChatId,
                    text=f"""<b>üïäÔ∏è –°—Ç–∞—Ä—à–∏–π –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç</b>

–°—Ç–∞—Ä—à–∏–π <b>{duty.FIO}</b> –æ—Å–≤–æ–±–æ–¥–∏–ª –≤–æ–ø—Ä–æ—Å. –û–∂–∏–¥–∞–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ–≥–æ""",
                )
                logger.info(
                    f"[–í–æ–ø—Ä–æ—Å] - [–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –í–æ–ø—Ä–æ—Å {question.Token} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω"
                )
            elif (
                question.TopicDutyFullname is not None
                and question.TopicDutyFullname != duty.FIO
            ):
                await message.reply("""<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>

–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!

<i>–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</i>""")
                logger.warning(
                    f"[–í–æ–ø—Ä–æ—Å] - [–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ {question.Token} –Ω–µ—É—Å–ø–µ—à–Ω–∞. –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É —Å—Ç–∞—Ä—à–µ–º—É"
                )
            elif question.TopicDutyFullname is None:
                await message.reply("""<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>

–≠—Ç–æ —á–∞—Ç —Å–µ–π—á–∞—Å –Ω–∏–∫–µ–º –Ω–µ –∑–∞–Ω—è—Ç!""")
                logger.warning(
                    f"[–í–æ–ø—Ä–æ—Å] - [–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ü–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ {question.Token} –Ω–µ—É—Å–ø–µ—à–Ω–∞. –í–æ–ø—Ä–æ—Å {question.Token} –Ω–∏–∫–µ–º –Ω–µ –∑–∞–Ω—è—Ç"
                )
        else:
            await message.answer("""<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –≤ –±–∞–∑–µ, –∑–∞–∫—Ä—ã–≤–∞—é""")
            await message.bot.close_forum_topic(
                chat_id=config.tg_bot.forum_id,
                message_thread_id=message.message_thread_id,
            )
            logger.error(
                f"[–í–æ–ø—Ä–æ—Å] - [–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ü–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ —Å TopicId = {message.message_thread_id}"
            )


@topic_cmds_router.callback_query(FinishedQuestion.filter(F.action == "release"))
async def release_q_cb(callback: CallbackQuery, stp_db):
    async with stp_db() as session:
        repo = RequestsRepo(session)
        question: Question = await repo.questions.get_question(
            topic_id=callback.message.message_thread_id
        )

        if question is not None:
            await repo.questions.update_question_duty(
                token=question.Token, topic_duty=None
            )
            await repo.questions.update_question_status(
                token=question.Token, status="open"
            )

            await callback.message.answer("""<b>üïäÔ∏è –í–æ–ø—Ä–æ—Å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω</b>

–î–ª—è –≤–∑—è—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–∞–±–æ—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç—É —Ç–µ–º—É""")
            logger.info(
                f"[–í–æ–ø—Ä–æ—Å] - [–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –í–æ–ø—Ä–æ—Å {question.Token} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω"
            )
        else:
            await callback.message.answer("""<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –≤ –±–∞–∑–µ, –∑–∞–∫—Ä—ã–≤–∞—é""")
            await callback.bot.close_forum_topic(
                chat_id=config.tg_bot.forum_id,
                message_thread_id=callback.message.message_thread_id,
            )
            logger.error(
                f"[–í–æ–ø—Ä–æ—Å] - [–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ü–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ —Å TopicId = {callback.message.message_thread_id}"
            )