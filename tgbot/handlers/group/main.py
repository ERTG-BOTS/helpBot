import logging
from typing import Sequence

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message

from infrastructure.database.models import Question, User
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.config import load_config
from tgbot.filters.topic import IsTopicMessage
from tgbot.handlers.group.cmds import end_q_cmd
from tgbot.keyboards.user.main import (
    QuestionQualityDuty,
    finish_question_kb,
)
from tgbot.misc import dicts
from tgbot.misc.helpers import check_premium_emoji
from tgbot.services.logger import setup_logging
from tgbot.services.scheduler import (
    restart_inactivity_timer,
    start_inactivity_timer,
    run_delete_timer,
)

topic_router = Router()

config = load_config(".env")

setup_logging()
logger = logging.getLogger(__name__)


@topic_router.message(IsTopicMessage())
async def handle_q_message(message: Message, repo: RequestsRepo, user: User):
    question: Question = await repo.questions.get_question(
        topic_id=message.message_thread_id
    )

    if message.text == "‚úÖÔ∏è –ó–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å":
        await end_q_cmd(message, repo, user)
        return

    if question is not None and question.Status != "closed":
        if not question.TopicDutyFullname:
            await repo.questions.update_question_duty(
                token=question.Token, topic_duty=user.FIO
            )
            await repo.questions.update_question_status(
                token=question.Token, status="in_progress"
            )

            duty_topics_today = await repo.questions.get_questions_count_today(
                duty_fullname=user.FIO
            )
            duty_topics_month = await repo.questions.get_questions_count_last_month(
                duty_fullname=user.FIO
            )

            employee: User = await repo.users.get_user(
                fullname=question.EmployeeFullname
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            if config.tg_bot.activity_status:
                start_inactivity_timer(question.Token, message.bot, repo)

            await message.bot.edit_forum_topic(
                chat_id=config.tg_bot.forum_id,
                message_thread_id=question.TopicId,
                icon_custom_emoji_id=dicts.topicEmojis["in_progress"],
            )
            await message.answer(
                f"""<b>üëÆ‚Äç‚ôÇÔ∏è –í–æ–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç–µ</b>

–ù–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—á–∞–µ—Ç <b>{user.FIO}</b> {'(<a href="https://t.me/' + user.Username + '">–ª—Å</a>)' if (user.Username != "–ù–µ —É–∫–∞–∑–∞–Ω" or user.Username != "–°–∫—Ä—ã—Ç–æ/–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ") else ""}

<blockquote expandable><b>‚öíÔ∏è –†–µ—à–µ–Ω–æ:</b> –∑–∞ –¥–µ–Ω—å {duty_topics_today} / –∑–∞ –º–µ—Å—è—Ü {duty_topics_month}</blockquote>""",
                disable_web_page_preview=True,
            )

            await message.bot.send_message(
                chat_id=employee.ChatId,
                text=f"""<b>üëÆ‚Äç‚ôÇÔ∏è –í–æ–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç–µ</b>

–°—Ç–∞—Ä—à–∏–π <b>{user.FIO}</b> –≤–∑—è–ª –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç—É""",
                reply_markup=finish_question_kb(),
            )
            await message.bot.copy_message(
                from_chat_id=config.tg_bot.forum_id,
                message_id=message.message_id,
                chat_id=employee.ChatId,
            )

            logger.info(
                f"[–í–æ–ø—Ä–æ—Å] - [–í —Ä–∞–±–æ—Ç–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –í–æ–ø—Ä–æ—Å {question.Token} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É"
            )
        else:
            if question.TopicDutyFullname == user.FIO:
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –¥–µ–∂—É—Ä–Ω–æ–≥–æ
                if config.tg_bot.activity_status:
                    restart_inactivity_timer(question.Token, message.bot, repo)

                await message.bot.copy_message(
                    from_chat_id=config.tg_bot.forum_id,
                    message_id=message.message_id,
                    chat_id=question.EmployeeChatId,
                )

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏
                have_premium_emoji, emoji_ids = await check_premium_emoji(message)
                if have_premium_emoji and emoji_ids:
                    emoji_sticker_list = await message.bot.get_custom_emoji_stickers(
                        emoji_ids
                    )

                    sticker_info = []
                    for emoji_sticker in emoji_sticker_list:
                        sticker_info.append(f"{emoji_sticker.emoji}")

                    stickers_text = "".join(sticker_info)

                    emoji_message = await message.reply(f"""<b>üíé –ü—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏</b>

–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏, —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É–≤–∏–¥–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏: {stickers_text}

<i>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥</i>""")
                    await run_delete_timer(
                        bot=message.bot,
                        chat_id=int(config.tg_bot.forum_id),
                        message_ids=[emoji_message.message_id],
                        seconds=30,
                    )

                logger.info(
                    f"[–í–æ–ø—Ä–æ—Å] - [–û–±—â–µ–Ω–∏–µ] –¢–æ–∫–µ–Ω: {question.Token} | –°—Ç–∞—Ä—à–∏–π: {question.TopicDutyFullname} | –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
                )
            else:
                await message.reply("""<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>

–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!

<i>–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</i>""")
                logger.warning(
                    f"[–í–æ–ø—Ä–æ—Å] - [–û–±—â–µ–Ω–∏–µ] –¢–æ–∫–µ–Ω: {question.Token} | –°—Ç–∞—Ä—à–∏–π: {question.TopicDutyFullname} | –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}. –ß–∞—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É —Å—Ç–∞—Ä—à–µ–º—É"
                )
    elif question.Status == "closed":
        await message.reply("""<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>

–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç!

<i>–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</i>""")
        logger.warning(
            f"[–í–æ–ø—Ä–æ—Å] - [–û–±—â–µ–Ω–∏–µ] –¢–æ–∫–µ–Ω: {question.Token} | –°—Ç–∞—Ä—à–∏–π: {question.TopicDutyFullname} | –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}. –ß–∞—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç"
        )
    else:
        await message.answer("""<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –≤ –±–∞–∑–µ, –∑–∞–∫—Ä—ã–≤–∞—é""")
        await message.bot.close_forum_topic(
            chat_id=config.tg_bot.forum_id,
            message_thread_id=message.message_thread_id,
        )
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–û–±—â–µ–Ω–∏–µ] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ —Å TopicId = {message.message_thread_id}. –ó–∞–∫—Ä—ã–ª–∏ —Ç–µ–º—É"
        )


@topic_router.callback_query(QuestionQualityDuty.filter(F.return_question))
async def return_q_duty(
    callback: CallbackQuery,
    callback_data: QuestionQualityDuty,
    user: User,
    repo: RequestsRepo,
):
    await callback.answer()
    question: Question = await repo.questions.get_question(token=callback_data.token)
    employee: User = await repo.users.get_user(user_id=question.EmployeeChatId)
    available_to_return_questions: Sequence[
        Question
    ] = await repo.questions.get_available_to_return_questions()
    active_dialogs = await repo.questions.get_active_questions()

    if (
        question.Status == "closed"
        and employee.FIO not in [d.EmployeeFullname for d in active_dialogs]
        and question.Token in [d.Token for d in available_to_return_questions]
        and question.TopicDutyFullname == user.FIO
    ):
        await repo.questions.update_question_status(token=question.Token, status="open")

        await callback.bot.edit_forum_topic(
            chat_id=config.tg_bot.forum_id,
            message_thread_id=question.TopicId,
            name=employee.FIO,
            icon_custom_emoji_id=dicts.topicEmojis["in_progress"],
        )
        await callback.bot.reopen_forum_topic(
            chat_id=config.tg_bot.forum_id, message_thread_id=question.TopicId
        )

        await callback.message.answer("""<b>üîì –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç</b>

–ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é""")
        await callback.bot.send_message(
            chat_id=question.EmployeeChatId,
            text=f"""<b>üîì –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç</b>

–°—Ç–∞—Ä—à–∏–π <b>{employee.FIO}</b> –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å:
<blockquote expandable><i>{question.QuestionText}</i></blockquote>""",
            reply_markup=finish_question_kb(),
        )
        logger.info(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –í–æ–ø—Ä–æ—Å {question.Token} –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç —Å—Ç–∞—Ä—à–∏–º"
        )
    elif question.TopicDutyFullname != user.FIO:
        await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!", show_alert=True)
        logger.warning(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è, –≤–æ–ø—Ä–æ—Å {question.Token} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É —Å—Ç–∞—Ä—à–µ–º—É"
        )
    elif employee.FIO in [d.EmployeeFullname for d in active_dialogs]:
        await callback.answer(
            "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å", show_alert=True
        )
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {question.EmployeeFullname} –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å"
        )
    elif question.Token not in [d.Token for d in available_to_return_questions]:
        await callback.answer(
            "–í–æ–ø—Ä–æ—Å –Ω–µ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å. –ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤", show_alert=True
        )
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è, –¥–∏–∞–ª–æ–≥ {question.Token} –±—ã–ª –∑–∞–∫—Ä—ã—Ç –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
        )
    elif question.Status != "closed":
        await callback.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –∑–∞–∫—Ä—ã—Ç", show_alert=True)
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è, –¥–∏–∞–ª–æ–≥ {question.Token} –Ω–µ –∑–∞–∫—Ä—ã—Ç"
        )
