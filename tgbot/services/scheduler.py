import datetime
import logging

import pytz
from aiogram import Bot
from aiogram.types import ReplyKeyboardRemove
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import Sequence

from infrastructure.database.models import Question
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.config import load_config
from tgbot.keyboards.user.main import closed_dialog_kb
from tgbot.misc import dicts
from tgbot.services.logger import setup_logging

scheduler = AsyncIOScheduler(timezone=pytz.utc)
config = load_config(".env")

setup_logging()
logger = logging.getLogger(__name__)


async def delete_messages(bot: Bot, chat_id: int, message_ids: list[int]):
    """–£–¥–∞–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        for message_id in message_ids:
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


async def run_delete_timer(
    bot: Bot, chat_id: int, message_ids: list[int], seconds: int = 60
):
    """Delete messages after timer. Default - 60 seconds."""
    try:
        scheduler.add_job(
            delete_messages,
            "date",
            run_date=datetime.datetime.now(tz=pytz.utc)
            + datetime.timedelta(seconds=seconds),
            args=[bot, chat_id, message_ids],
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


async def remove_question_timer(bot: Bot, question: Question, repo: RequestsRepo):
    warning_job_id = f"remove_{question.Token}"
    scheduler.add_job(
        remove_question,
        "date",
        run_date=datetime.datetime.now(tz=pytz.utc) + datetime.timedelta(seconds=30),
        args=[bot, question, repo],
        id=warning_job_id,
    )


async def remove_question(bot: Bot, question: Question, repo: RequestsRepo):
    await repo.questions.delete_question(token=question.Token)

    await bot.delete_forum_topic(
        chat_id=config.tg_bot.forum_id, message_thread_id=question.TopicId
    )


async def remove_old_topics(bot: Bot, repo: RequestsRepo):
    old_questions: Sequence[Question] = await repo.questions.get_old_questions()

    for question in old_questions:
        await bot.delete_forum_topic(
            chat_id=config.tg_bot.forum_id, message_thread_id=question.TopicId
        )

    result = await repo.questions.delete_question(dialogs=old_questions)
    logger.info(
        f"[–°—Ç–∞—Ä—ã–µ —Ç–æ–ø–∏–∫–∏] –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {result['deleted_count']} –∏–∑ {result['total_count']} —Å—Ç–∞—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
    )
    if result["errors"]:
        logger.info(
            f"[–°—Ç–∞—Ä—ã–µ —Ç–æ–ø–∏–∫–∏] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {result['errors']}"
        )


async def send_inactivity_warning(bot: Bot, question_token: str, repo: RequestsRepo):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç."""
    try:
        question: Question = await repo.questions.get_question(token=question_token)

        if question and question.Status in ["open", "in_progress"]:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫
            await bot.send_message(
                chat_id=config.tg_bot.forum_id,
                message_thread_id=question.TopicId,
                text="‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n–ß–∞—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(
                chat_id=question.EmployeeChatId,
                text="‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            )

    except Exception as e:
        logger.error(
            f"[–¢–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_token}: {e}"
        )


async def auto_close_question(bot: Bot, question_token: str, repo: RequestsRepo):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    try:
        question: Question = await repo.questions.get_question(token=question_token)

        if question and question.Status in ["open", "in_progress"]:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
            await repo.questions.update_question_status(
                token=question_token, status="closed"
            )
            await repo.questions.update_question_end(
                token=question_token, end_time=datetime.datetime.now()
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ø–∏–∫
            await bot.edit_forum_topic(
                chat_id=config.tg_bot.forum_id,
                message_thread_id=question.TopicId,
                name=question.Token,
                icon_custom_emoji_id=dicts.topicEmojis["closed"],
            )
            await bot.close_forum_topic(
                chat_id=config.tg_bot.forum_id, message_thread_id=question.TopicId
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
            await bot.send_message(
                chat_id=config.tg_bot.forum_id,
                message_thread_id=question.TopicId,
                text="üîí <b>–í–æ–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç</b>\n\n–í–æ–ø—Ä–æ—Å –±—ã–ª –∑–∞–∫—Ä—ã—Ç –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç",
                reply_markup=closed_dialog_kb(token=question_token, role="duty"),
            )

            await bot.send_message(
                chat_id=question.EmployeeChatId,
                text="üîí <b>–í–æ–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç</b>",
                reply_markup=ReplyKeyboardRemove(),
            )
            await bot.send_message(
                chat_id=question.EmployeeChatId,
                text="–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å –±—ã–ª –∑–∞–∫—Ä—ã—Ç –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç",
                reply_markup=closed_dialog_kb(token=question_token, role="employee"),
            )

    except Exception as e:
        logger.error(
            f"[–¢–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ {question_token}: {e}"
        )


def start_inactivity_timer(question_token: str, bot: Bot, repo: RequestsRepo):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞."""
    try:
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        stop_inactivity_timer(question_token)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (5 –º–∏–Ω—É—Ç)
        warning_job_id = f"warning_{question_token}"
        scheduler.add_job(
            send_inactivity_warning,
            "date",
            run_date=datetime.datetime.now(tz=pytz.utc)
            + datetime.timedelta(minutes=config.tg_bot.activity_warn_minutes),
            args=[bot, question_token, repo],
            id=warning_job_id,
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è (10 –º–∏–Ω—É—Ç)
        close_job_id = f"close_{question_token}"
        scheduler.add_job(
            auto_close_question,
            "date",
            run_date=datetime.datetime.now(tz=pytz.utc)
            + datetime.timedelta(minutes=config.tg_bot.activity_close_minutes),
            args=[bot, question_token, repo],
            id=close_job_id,
        )

    except Exception as e:
        logger.error(
            f"[–¢–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_token}: {e}"
        )


def stop_inactivity_timer(question_token: str):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞."""
    try:
        warning_job_id = f"warning_{question_token}"
        close_job_id = f"close_{question_token}"

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if scheduler.get_job(warning_job_id):
            scheduler.remove_job(warning_job_id)

        if scheduler.get_job(close_job_id):
            scheduler.remove_job(close_job_id)

    except Exception as e:
        logger.error(
            f"[–¢–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_token}: {e}"
        )


def restart_inactivity_timer(question_token: str, bot: Bot, repo: RequestsRepo):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞."""
    stop_inactivity_timer(question_token)
    start_inactivity_timer(question_token, bot, repo)
